/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas.Comida;

import AccesoADatos.ComidaData;
import Entidades.Comida;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.DefaultTableCellRenderer;
import utils.CargarComponente;
import utils.Estado;

/**
 *
 * @author alber
 */
public class ListarComidaView extends javax.swing.JPanel {

    /**
     * Creates new form ListarComidaView
     */
    private final DefaultTableModel model = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int i, int i1) {
            switch (i1) {
                case 1:
                    if (i > 0) {
                        return Boolean.TRUE;
                    } else {
                        return Boolean.FALSE;
                    }
                default:
                    return Boolean.FALSE;
            }
        }
    };

    public ListarComidaView() {
        initComponents();
        initTableComida();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        JTableComida = new javax.swing.JTable();
        JLtituloComida = new javax.swing.JLabel();
        jBBuscarComida = new javax.swing.JButton();
        jBCancelarComida = new javax.swing.JButton();
        jSTextComidaList = new javax.swing.JSeparator();
        jTextFieldComidaList = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(35, 35, 35));
        setPreferredSize(new java.awt.Dimension(1100, 670));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JTableComida.setBackground(new java.awt.Color(51, 51, 51));
        JTableComida.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        JTableComida.setForeground(new java.awt.Color(255, 255, 255));
        JTableComida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTableComida.setGridColor(new java.awt.Color(0, 0, 0));
        JTableComida.setRowHeight(40);
        JTableComida.setSelectionBackground(new java.awt.Color(30, 150, 117));
        JTableComida.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(JTableComida);
        if (JTableComida.getColumnModel().getColumnCount() > 0) {
            JTableComida.getColumnModel().getColumn(0).setResizable(false);
            JTableComida.getColumnModel().getColumn(0).setPreferredWidth(50);
            JTableComida.getColumnModel().getColumn(1).setResizable(false);
            JTableComida.getColumnModel().getColumn(1).setPreferredWidth(300);
            JTableComida.getColumnModel().getColumn(2).setResizable(false);
            JTableComida.getColumnModel().getColumn(2).setPreferredWidth(90);
            JTableComida.getColumnModel().getColumn(3).setResizable(false);
            JTableComida.getColumnModel().getColumn(3).setPreferredWidth(90);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 190, 660, 449));

        JLtituloComida.setFont(new java.awt.Font("Dialog", 1, 39)); // NOI18N
        JLtituloComida.setForeground(new java.awt.Color(255, 255, 255));
        JLtituloComida.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JLtituloComida.setText("Lista de Comidas");
        JLtituloComida.setMaximumSize(new java.awt.Dimension(352, 50));
        JLtituloComida.setMinimumSize(new java.awt.Dimension(352, 50));
        JLtituloComida.setPreferredSize(new java.awt.Dimension(352, 50));
        add(JLtituloComida, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 1080, -1));

        jBBuscarComida.setBackground(new java.awt.Color(51, 153, 255));
        jBBuscarComida.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar.png"))); // NOI18N
        jBBuscarComida.setToolTipText("");
        jBBuscarComida.setBorder(null);
        jBBuscarComida.setBorderPainted(false);
        jBBuscarComida.setContentAreaFilled(false);
        jBBuscarComida.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBBuscarComida.setOpaque(true);
        jBBuscarComida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarComidaActionPerformed(evt);
            }
        });
        add(jBBuscarComida, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 110, 77, 40));

        jBCancelarComida.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/cancelar.png"))); // NOI18N
        jBCancelarComida.setToolTipText("");
        jBCancelarComida.setBorder(null);
        jBCancelarComida.setBorderPainted(false);
        jBCancelarComida.setContentAreaFilled(false);
        jBCancelarComida.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBCancelarComida.setOpaque(true);
        jBCancelarComida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarComidaActionPerformed(evt);
            }
        });
        add(jBCancelarComida, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 110, 40, 40));

        jSTextComidaList.setForeground(new java.awt.Color(255, 255, 255));
        jSTextComidaList.setToolTipText("");
        jSTextComidaList.setOpaque(true);
        jSTextComidaList.setPreferredSize(new java.awt.Dimension(50, 2));
        add(jSTextComidaList, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 152, 130, -1));

        jTextFieldComidaList.setBackground(new java.awt.Color(35, 35, 35));
        jTextFieldComidaList.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jTextFieldComidaList.setForeground(new java.awt.Color(204, 204, 204));
        jTextFieldComidaList.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(2, 15, 2, 15), javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1)));
        jTextFieldComidaList.setCaretColor(new java.awt.Color(51, 153, 255));
        jTextFieldComidaList.setSelectionColor(new java.awt.Color(102, 102, 102));
        jTextFieldComidaList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldComidaListFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldComidaListFocusLost(evt);
            }
        });
        jTextFieldComidaList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldComidaListActionPerformed(evt);
            }
        });
        jTextFieldComidaList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldComidaListKeyTyped(evt);
            }
        });
        add(jTextFieldComidaList, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 110, 130, 40));

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Escriba hasta que cantidad de calorias quiere listar :");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 120, -1, 40));
    }// </editor-fold>//GEN-END:initComponents

    private void jBBuscarComidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarComidaActionPerformed
        try {
            int num;
            num = Integer.parseInt(jTextFieldComidaList.getText());
            List<Comida> listacomidas;
            listacomidas = ComidaData.buscarComidasPorCalorias(num, Estado.TODOS);
            if (listacomidas.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se ha encontrado ninguna comida menor: " + num);
                return;
            }
            cargarTabla(listacomidas);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un número válido de calorías.");
        }
    }//GEN-LAST:event_jBBuscarComidaActionPerformed

    private void jBCancelarComidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarComidaActionPerformed
        //Llamamos al metodo limpiarCampos
        CargarComponente.borrarFilas(JTableComida, model);
        this.jTextFieldComidaList.setText("");
    }//GEN-LAST:event_jBCancelarComidaActionPerformed

    private void jTextFieldComidaListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldComidaListFocusGained
        this.jTextFieldComidaList.setBackground(new Color(63, 63, 63));
        this.jSTextComidaList.setBackground(new Color(82, 168, 255));
    }//GEN-LAST:event_jTextFieldComidaListFocusGained

    private void jTextFieldComidaListFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldComidaListFocusLost
        this.jTextFieldComidaList.setBackground(new Color(35, 35, 35));
        this.jSTextComidaList.setBackground(Color.WHITE);
    }//GEN-LAST:event_jTextFieldComidaListFocusLost

    private void jTextFieldComidaListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldComidaListActionPerformed
        jBBuscarComidaActionPerformed(evt);
    }//GEN-LAST:event_jTextFieldComidaListActionPerformed

    private void jTextFieldComidaListKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldComidaListKeyTyped
        char caracter = evt.getKeyChar();
        if(caracter < '0' || caracter > '9'){
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldComidaListKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLtituloComida;
    private javax.swing.JTable JTableComida;
    private javax.swing.JButton jBBuscarComida;
    private javax.swing.JButton jBCancelarComida;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSTextComidaList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldComidaList;
    // End of variables declaration//GEN-END:variables

    private void initTableComida() {
        this.model.addColumn("Código");
        this.model.addColumn("Nombre");
        this.model.addColumn("Calorías");
        this.model.addColumn("Estado");

        this.JTableComida.setModel(model);   
        JTableHeader tableHeader = JTableComida.getTableHeader();
        tableHeader.setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                c.setPreferredSize(new Dimension(c.getWidth(), 40));
                c.setBackground(Color.GRAY); 
                c.setForeground(Color.WHITE);
                return c;
            }
        });

    }

    private void cargarTabla(List<Comida> listaUsar) {
        CargarComponente.borrarFilas(JTableComida, model);
        listaUsar.forEach((comida) -> {
            model.addRow(new Object[]{comida.getIdComida(), comida.getNombre(), comida.getCantCalorias(), (comida.isEstado()) ? "Activo" : "Inactivo"});
        });
    }

}
